{"version":3,"file":"static/js/994.13c08843.chunk.js","mappings":"uSAuLA,UA1KiB,WACb,OAAwBA,EAAAA,EAAAA,UAAS,CAAC,KAAQ,QAAQ,GAAM,QAAQ,KAAQ,QAAQ,SAAY,KAAI,eAAzFC,EAAI,KAAEC,EAAO,KACpB,GAA0BF,EAAAA,EAAAA,UAASG,GAAS,eAArCC,EAAK,KACZ,GADsB,MACIJ,EAAAA,EAAAA,UAAS,IAAE,eAA9BK,EAAK,KAAEC,EAAQ,KACtB,GAAsBN,EAAAA,EAAAA,UAAS,IAAG,eAA3BO,EAAG,KAAEC,EAAM,KAClB,GAA8CC,EAAAA,EAAAA,KAAiB,eAAxDC,EAAU,KAAEC,EAAS,KACxBC,GADsC,KACjC,GAwFDC,EAAkB,SAACC,EAAMF,GAC7BG,QAAQC,IAAIF,GACZC,QAAQC,IAAIJ,GACZ,IAAIK,EAASC,SAASC,eAAeP,GACjCQ,EAAUF,SAASC,eAAe,WAClCE,EAAUJ,EAAOK,wBACrBF,EAAQG,MAAMC,KAAQH,EAAQI,MAAQ,GAAM,KAC5CL,EAAQG,MAAMG,IAAOC,OAAOC,QAAUP,EAAQK,IAAM,GAAM,KAC1DN,EAAQG,MAAMM,QAAU,QACxBX,SAASC,eAAe,eAAeW,UAAYhB,EACnDiB,mBAAkB,EACpB,EACMC,EAAiB,SAACpB,GACtBmB,mBAAkB,GACLb,SAASC,eAAeP,GACvBM,SAASC,eAAe,WAC9BI,MAAMM,QAAU,MAC1B,EASA,SAASI,IAEP,IAAIC,EAAW9B,EAAM8B,SAASC,MAAM9B,EAAME,GAC1CQ,QAAQC,IAAIkB,GACEA,EAAS7B,GACvBC,EAASC,GACTC,EAAOD,EAAM,IAEbQ,QAAQC,IAAIX,GACZU,QAAQC,IAAIT,GACZL,EAAQ,CAAC,KAAQ,QAAQ,GAAM,QAAQ,KAAQ,QAAQ,SAAYgC,GACrE,CAKF,OAJEE,EAAAA,EAAAA,YAAU,WACRH,GACF,GAAG,KAGH,+BACE,UAAC,KAAI,YACL,0BACI,mBAAQI,UAAU,kBAAkBC,QAAS,SAACC,GAAC,OAAGN,GAAgB,EAAC,+BAErE,UAAC,KAAI,CAACO,GAAI,GAAIjB,MAAO,CAAC,OAAS,UAAU,WACzC,SAAC,IAAI,CACHtB,KAAMA,EACNS,WAAYA,EACZ+B,wBA3IkB,SAAH,GAAmC,IAA7BC,EAAS,EAATA,UAAWC,EAAU,EAAVA,WAChCC,EAAYF,EAAgB,KAAEG,UAAU,EAAG,IAC/CD,GAAwB,MACxB,IAAIE,EAAOJ,EAAUI,KACjBC,EAAS,SAASnC,EACtB,MACa,UAATkC,GACE,iCACA,eAAGlC,GAAImC,EAAQC,UAAU,uBAAsB,WAC/C,eAAGpC,GAAG,aAAa,YAAU,aAAaoC,UAAU,kBAAiB,WACnE,eAAGC,MAAM,MAAMrC,GAAG,iBAAiB,YAAU,iBAAiBoC,UAAU,qBAAqBE,KAAK,UAAUC,OAAO,UAAU,eAAa,IAAIb,QAASK,EAAW,WAChK,iBAAMM,MAAM,MAAMG,OAAO,KAAKC,GAAG,KAAKF,OAAO,UAC7C,iBAAMG,EAAE,IAAIC,EAAE,IAAIN,MAAM,MAAMG,OAAO,KAAKC,GAAG,KAAKH,KAAK,aAEzD,iBAAMtC,GAAG,WAAW,YAAU,WAAW4C,GAAG,MAAMR,UAAU,yBAAyBE,KAAK,OAAOC,OAAO,UAAU,eAAa,UAEjI,iBAAMvC,GAAG,WAAW6C,YAAY,IAAIT,UAAU,qBAAqBE,KAAK,UAAU,YAAU,KAAK,cAAY,sBAAqB,UAAC,kBAAOI,EAAE,MAAMC,EAAE,IAAIJ,OAAO,QAAQO,YAAa,kBAAM7C,EAAgB6B,EAAUiB,KAAKZ,EAAO,EAAEa,WAAY,kBAAM5B,EAAee,EAAO,EAAC,0BAC3Q,iBAAMnC,GAAG,aAAa6C,YAAY,IAAI,YAAU,WAAWT,UAAU,qBAAqBE,KAAK,OAAO,YAAU,KAAK,cAAY,sBAAqB,UAAC,mBAAOI,EAAE,MAAMC,EAAE,IAAIJ,OAAO,QAAO,kBAAOT,EAAc,SAC/M,iBAAM9B,GAAG,GAAG6C,YAAY,IAAIT,UAAU,qBAAqBE,KAAK,OAAO,YAAU,KAAK,cAAY,sBAAqB,UAAC,kBAAOI,EAAE,IAAIC,EAAE,KAAKJ,OAAO,QAAO,SAAEP,SAE3JhC,OAGQ,UAATkC,GACE,iCACA,eAAGlC,GAAImC,EAAQC,UAAU,uBAAsB,WAC/C,eAAGpC,GAAG,aAAa,YAAU,aAAaoC,UAAU,kBAAiB,WACnE,eAAGC,MAAM,MAAMrC,GAAG,iBAAiB,YAAU,iBAAiBoC,UAAU,qBAAqBE,KAAK,UAAUC,OAAO,UAAU,eAAa,IAAIb,QAASK,EAAW,WAChK,iBAAMM,MAAM,MAAMG,OAAO,KAAKC,GAAG,KAAKF,OAAO,UAC7C,iBAAMG,EAAE,IAAIC,EAAE,IAAIN,MAAM,MAAMG,OAAO,KAAKC,GAAG,KAAKH,KAAK,aAEzD,iBAAMtC,GAAG,WAAW,YAAU,WAAW4C,GAAG,MAAMR,UAAU,yBAAyBE,KAAK,OAAOC,OAAO,UAAU,eAAa,UAEjI,iBAAMvC,GAAG,WAAW6C,YAAY,IAAIT,UAAU,qBAAqBE,KAAK,UAAU,YAAU,KAAK,cAAY,sBAAqB,UAAC,kBAAOI,EAAE,MAAMC,EAAE,IAAIJ,OAAO,QAAQO,YAAa,kBAAM7C,EAAgB6B,EAAUiB,KAAKZ,EAAO,EAAEa,WAAY,kBAAM5B,EAAee,EAAO,EAAC,0BAC3Q,iBAAMnC,GAAG,aAAa6C,YAAY,IAAI,YAAU,WAAWT,UAAU,qBAAqBE,KAAK,OAAO,YAAU,KAAK,cAAY,sBAAqB,UAAC,mBAAOI,EAAE,MAAMC,EAAE,IAAIJ,OAAO,QAAO,kBAAOT,EAAc,SAC/M,iBAAM9B,GAAG,GAAG6C,YAAY,IAAIT,UAAU,qBAAqBE,KAAK,OAAO,YAAU,KAAK,cAAY,sBAAqB,UAAC,kBAAOI,EAAE,IAAIC,EAAE,KAAKJ,OAAO,QAAO,SAAEP,SAE3JhC,OAGM,UAATkC,GACE,iCACE,eAAGlC,GAAImC,EAAQC,UAAU,gCAAgCV,QAASK,EAAW,WAC3E,eAAG/B,GAAG,iBAAiB,YAAU,iBAAiBoC,UAAU,8BAA8BE,KAAK,UAAUC,OAAO,UAAU,eAAa,IAAG,WACxI,iBAAMF,MAAM,MAAMG,OAAO,KAAKC,GAAG,KAAKF,OAAO,UAC7C,iBAAMG,EAAE,IAAIC,EAAE,IAAIN,MAAM,MAAMG,OAAO,KAAKC,GAAG,KAAKH,KAAK,aAEzD,iBAAMtC,GAAG,GAAG6C,YAAY,IAAIT,UAAU,8BAA8BE,KAAK,OAAO,YAAU,KAAK,cAAY,sBAAqB,UAAC,kBAAOI,EAAE,IAAIC,EAAE,KAAKJ,OAAO,QAAO,SAAEP,OACrK,iBAAMhC,GAAG,WAAW6C,YAAY,IAAIT,UAAU,8BAA8BE,KAAK,UAAU,YAAU,KAAK,cAAY,sBAAqB,UAAC,kBAAOI,EAAE,MAAMC,EAAE,IAAIJ,OAAO,QAAQO,YAAa,kBAAM7C,EAAgB6B,EAAUiB,KAAKZ,EAAO,EAAEa,WAAY,kBAAM5B,EAAee,EAAO,EAAC,4BAErRnC,OAGQ,UAATkC,GACE,+BACE,eAAGlC,GAAG,SAASoC,UAAU,wBAAuB,WAC9C,eAAGpC,GAAG,iBAAiB,YAAU,iBAAiBoC,UAAU,sBAAsBE,KAAK,UAAUC,OAAO,UAAU,eAAa,IAAIb,QAASK,EAAW,WACrJ,iBAAMM,MAAM,MAAMG,OAAO,KAAKC,GAAG,IAAIF,OAAO,UAC5C,iBAAMG,EAAE,IAAIC,EAAE,IAAIN,MAAM,MAAMG,OAAO,KAAKC,GAAG,IAAIH,KAAK,aAExD,iBAAMtC,GAAG,WAAW6C,YAAY,IAAIT,UAAU,sBAAsBE,KAAK,MAAM,YAAU,KAAK,cAAY,sBAAqB,UAAC,kBAAOI,EAAE,IAAIC,EAAE,KAAI,SAAEX,YAIzJ,uBAMd,EAsEMiB,YAAY,aACZC,OAtES,CACbC,MAAO,CACLC,KAAM,CACJC,MAAO,OACPC,WAAY,CACVjB,MAAO,IACPG,OAAQ,GACRE,GAAI,IACJC,GAAI,IAENY,UAAW,CACTC,IAAK,OA4DPC,aArCY,CAChBJ,MAAO,OACPC,WAAY,CACVjB,MAAO,EACPG,OAAQ,IAkCNkB,SAAS,OACT3D,UAAWA,EACX4D,SAAU,CACRjB,EAAG,IACHC,EAAG,KAELiB,WAAY,CACVC,SAAU,EACVC,YAAa,MAGf,gBAAK9D,GAAG,UAAS,UACf,cAAGA,GAAG,yBAMpB,C","sources":["views/dashboard/DashTree.js"],"sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport { CCard, CCardBody, CCol, CCardHeader, CRow } from '@coreui/react'\r\nimport Tree from 'react-d3-tree'\r\nimport { useCenteredTree } from \"./helpers/Helpers\"\r\nimport './style.css';\r\nimport {fitWrappedText} from 'canvas-text-wrapper';\r\nimport { Tooltip } from 'react-tooltip';\r\nimport \"react-tooltip/dist/react-tooltip.css\";\r\nimport treedata from './tree2.json'\r\nimport treedata2 from './tree2.json'\r\nimport axios from 'axios'\r\n\r\n\r\nconst DashTree = () => {\r\n    const [data, setData] = useState({\"name\": \"roots\",\"id\": \"R0001\",\"type\": \"step1\",\"children\": []});\r\n    const [datas, setDatas] = useState(treedata);    \r\n    const [start, setStart] = useState(0); \r\n    const [end, setEnd] = useState(40);\r\n    const [dimensions, translate, containerRef] = useCenteredTree();    \r\n    let id = 0;\r\n    const renderRectSvgNode = ({ nodeDatum, toggleNode }) => {\r\n        let shortText = nodeDatum['name'].substring(0, 30);\r\n        shortText = shortText + '...'\r\n        let type = nodeDatum.type;\r\n        let svg_id = \"svg_id\"+id;\r\n        return (\r\n            type === \"step1\" ? (\r\n              <>\r\n              <g id={svg_id} transform=\"translate(-536 -571)\" >\r\n              <g id=\"Group_5599\" data-name=\"Group 5599\" transform=\"translate(-5 7)\">\r\n                <g width=\"230\" id=\"Rectangle_3512\" data-name=\"Rectangle 3512\" transform=\"translate(541 520)\" fill=\"#141517\" stroke=\"#1993e6\" stroke-width=\"2\" onClick={toggleNode}>\r\n                  <rect width=\"200\" height=\"94\" rx=\"13\" stroke=\"none\"/>\r\n                  <rect x=\"1\" y=\"1\" width=\"200\" height=\"92\" rx=\"12\" fill=\"none\"/>\r\n                </g>\r\n                <line id=\"Line_329\" data-name=\"Line 329\" x2=\"200\" transform=\"translate(542.5 554.5)\" fill=\"none\" stroke=\"#1993e6\" stroke-width=\"2\"/>\r\n              </g>\r\n              <text id=\"Dasboard\" strokeWidth=\"0\" transform=\"translate(704 608)\" fill=\"#1993e6\" font-size=\"15\" font-family=\"'Rubik', sans-serif\"><tspan x=\"-50\" y=\"0\" stroke='white' onMouseOver={() => handleMouseOver(nodeDatum.name,svg_id)} onMouseOut={() => handleMouseOut(svg_id)} >Read more</tspan></text>\r\n              <text id=\"Dasboard-2\" strokeWidth=\"0\" data-name=\"Dasboard\" transform=\"translate(622 553)\" fill=\"#fff\" font-size=\"21\" font-family=\"'Rubik', sans-serif\"><tspan x=\"-30\" y=\"0\" stroke='white'>ID : {nodeDatum['id']}</tspan></text>\r\n              <text id=\"\" strokeWidth=\"0\" transform=\"translate(546 571)\" fill=\"#fff\" font-size=\"15\" font-family=\"'Rubik', sans-serif\"><tspan x=\"0\" y=\"14\" stroke='white'>{shortText}</tspan></text>\r\n              </g>          \r\n              {id++}\r\n            </>       \r\n            ) : (\r\n              type === \"step2\" ? (\r\n                <>\r\n                <g id={svg_id} transform=\"translate(-536 -571)\" >\r\n                <g id=\"Group_5599\" data-name=\"Group 5599\" transform=\"translate(-5 7)\">\r\n                  <g width=\"230\" id=\"Rectangle_3512\" data-name=\"Rectangle 3512\" transform=\"translate(541 520)\" fill=\"#141517\" stroke=\"#1993e6\" stroke-width=\"2\" onClick={toggleNode}>\r\n                    <rect width=\"230\" height=\"94\" rx=\"13\" stroke=\"none\"/>\r\n                    <rect x=\"1\" y=\"1\" width=\"230\" height=\"92\" rx=\"12\" fill=\"none\"/>\r\n                  </g>\r\n                  <line id=\"Line_329\" data-name=\"Line 329\" x2=\"230\" transform=\"translate(542.5 554.5)\" fill=\"none\" stroke=\"#1993e6\" stroke-width=\"2\"/>\r\n                </g>\r\n                <text id=\"Dasboard\" strokeWidth=\"0\" transform=\"translate(704 608)\" fill=\"#1993e6\" font-size=\"15\" font-family=\"'Rubik', sans-serif\"><tspan x=\"-20\" y=\"0\" stroke='white' onMouseOver={() => handleMouseOver(nodeDatum.name,svg_id)} onMouseOut={() => handleMouseOut(svg_id)} >Read more</tspan></text>\r\n                <text id=\"Dasboard-2\" strokeWidth=\"0\" data-name=\"Dasboard\" transform=\"translate(622 553)\" fill=\"#fff\" font-size=\"21\" font-family=\"'Rubik', sans-serif\"><tspan x=\"-10\" y=\"0\" stroke='white'>ID : {nodeDatum['id']}</tspan></text>\r\n                <text id=\"\" strokeWidth=\"0\" transform=\"translate(546 571)\" fill=\"#fff\" font-size=\"15\" font-family=\"'Rubik', sans-serif\"><tspan x=\"0\" y=\"14\" stroke='white'>{shortText}</tspan></text>\r\n                </g>          \r\n                {id++}              \r\n                </>\r\n              ) : (\r\n              type === \"step3\" ? (\r\n                <>\r\n                  <g id={svg_id} transform=\"translate(-1266.028 -450.689)\" onClick={toggleNode}>\r\n                    <g id=\"Rectangle_3715\" data-name=\"Rectangle 3715\" transform=\"translate(1266.028 420.689)\" fill=\"#141517\" stroke=\"#1993e6\" stroke-width=\"2\">\r\n                      <rect width=\"210\" height=\"73\" rx=\"16\" stroke=\"none\"/>\r\n                      <rect x=\"1\" y=\"1\" width=\"210\" height=\"71\" rx=\"15\" fill=\"none\"/>\r\n                    </g>\r\n                    <text id=\"\" strokeWidth=\"0\" transform=\"translate(1279.461 442.189)\" fill=\"#fff\" font-size=\"15\" font-family=\"'Rubik', sans-serif\"><tspan x=\"0\" y=\"14\" stroke='white'>{shortText}</tspan></text>\r\n                    <text id=\"Dasboard\" strokeWidth=\"0\" transform=\"translate(1435.714 478.811)\" fill=\"#1993e6\" font-size=\"15\" font-family=\"'Rubik', sans-serif\"><tspan x=\"-50\" y=\"0\" stroke='white' onMouseOver={() => handleMouseOver(nodeDatum.name,svg_id)} onMouseOut={() => handleMouseOut(svg_id)}>Read more</tspan></text>\r\n                  </g>              \r\n                  {id++}\r\n                </>\r\n                ) : (\r\n                  type === \"step4\" ? (\r\n                    <>\r\n                      <g id=\"result\" transform=\"translate(-1644 -445)\">\r\n                        <g id=\"Rectangle_3716\" data-name=\"Rectangle 3716\" transform=\"translate(1644 420)\" fill=\"#141517\" stroke=\"#e50019\" stroke-width=\"2\" onClick={toggleNode}>\r\n                          <rect width=\"136\" height=\"56\" rx=\"9\" stroke=\"none\"/>\r\n                          <rect x=\"1\" y=\"1\" width=\"134\" height=\"54\" rx=\"8\" fill=\"none\"/>\r\n                        </g>\r\n                        <text id=\"Dasboard\" strokeWidth=\"0\" transform=\"translate(1683 461)\" fill=\"red\" font-size=\"21\" font-family=\"'Rubik', sans-serif\"><tspan x=\"0\" y=\"-8\">{shortText}</tspan></text>\r\n                      </g>                  \r\n                    </>\r\n                  ) : (\r\n                    <></>\r\n                  )\r\n                )\r\n                )    \r\n            )\r\n        );\r\n      }\r\n      const styles = {\r\n        nodes: {\r\n          node: {\r\n            shape: 'rect',\r\n            shapeProps: {\r\n              width: 200,\r\n              height: 50,\r\n              x: -100,\r\n              y: -25\r\n            },\r\n            textBlock: {\r\n              dy: -20\r\n            }\r\n          }\r\n        }\r\n      }  \r\n      const handleMouseOver = (input,id) => {\r\n        console.log(input);\r\n        console.log(id);\r\n        var myicon = document.getElementById(id);\r\n        var mypopup = document.getElementById(\"mypopup\");    \r\n        var iconPos = myicon.getBoundingClientRect();\r\n        mypopup.style.left = (iconPos.right + 20) + \"px\";\r\n        mypopup.style.top = (window.scrollY + iconPos.top - 60) + \"px\";\r\n        mypopup.style.display = \"block\";    \r\n        document.getElementById(\"svg_content\").innerText = input;\r\n        setTooltipVisible(true);\r\n      };\r\n      const handleMouseOut = (id) => {\r\n        setTooltipVisible(false);\r\n        var myicon = document.getElementById(id);\r\n        var mypopup = document.getElementById(\"mypopup\");    \r\n        mypopup.style.display = \"none\";    \r\n      };\r\n      const svgSquare = {\r\n        shape: 'rect',\r\n        shapeProps: {\r\n          width: 0,\r\n          height: 0,\r\n        }\r\n      }\r\n        \r\n      function handleLoadMore() {\r\n          \r\n        let children = datas.children.slice(start,end);\r\n        console.log(children);\r\n        const child = children[start];\r\n        setStart(end);\r\n        setEnd(end + 40);\r\n      \r\n        console.log(start);\r\n        console.log(end);\r\n        setData({\"name\": \"roots\",\"id\": \"R0001\",\"type\": \"step1\",\"children\": children})        \r\n      }\r\n      useEffect(() => {\r\n        handleLoadMore();\r\n      }, []);    \r\n              \r\n    return (\r\n      <>\r\n        <CRow>\r\n        <div>\r\n            <button className='btn btn-primary' onClick={(e)=>handleLoadMore()}>Load Next Data</button>    \r\n        </div>\r\n          <CCol xs={12} style={{\"height\":\"1000px\"}}>\r\n          <Tree \r\n            data={data} \r\n            dimensions={dimensions}\r\n            renderCustomNodeElement={renderRectSvgNode}\r\n            orientation=\"horizontal\"        \r\n            styles={styles}         \r\n            nodeSvgShape={svgSquare}\r\n            pathFunc=\"step\"\r\n            translate={translate}\r\n            nodeSize={{\r\n              x: 240,\r\n              y: 200\r\n            }}\r\n            separation={{\r\n              siblings: 1,\r\n              nonSiblings: 1\r\n            }}                          \r\n          />              \r\n            <div id=\"mypopup\">\r\n              <p id=\"svg_content\"></p>\r\n            </div>        \r\n          </CCol>\r\n        </CRow>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default DashTree\r\n"],"names":["useState","data","setData","treedata","datas","start","setStart","end","setEnd","useCenteredTree","dimensions","translate","id","handleMouseOver","input","console","log","myicon","document","getElementById","mypopup","iconPos","getBoundingClientRect","style","left","right","top","window","scrollY","display","innerText","setTooltipVisible","handleMouseOut","handleLoadMore","children","slice","useEffect","className","onClick","e","xs","renderCustomNodeElement","nodeDatum","toggleNode","shortText","substring","type","svg_id","transform","width","fill","stroke","height","rx","x","y","x2","strokeWidth","onMouseOver","name","onMouseOut","orientation","styles","nodes","node","shape","shapeProps","textBlock","dy","nodeSvgShape","pathFunc","nodeSize","separation","siblings","nonSiblings"],"sourceRoot":""}