{"version":3,"file":"static/js/3570.0232f6f2.chunk.js","mappings":"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","sources":["views/dashboard/Pagination/PaginationTree.js","views/dashboard/DashTree.js","views/dashboard/helpers/Helpers.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CButtonToolbar, CButtonGroup, CButton, CSpinner} from '@coreui/react'\r\n\r\nconst PaginationTree = (props) => {\r\nconst [pager, setPager] = useState({});\r\nconst [initialPage, setInitialPage] = useState(1);\r\nconst [pageSize, setPageSize] = useState();\r\n\r\nuseEffect(() => {\r\nif (props.items && props.items.length) {\r\n  setPage(initialPage);\r\n  setPageSize(props.pageSize);\r\n}\r\n}, [props.items, initialPage, props.pageSize]);\r\n\r\nuseEffect(() => {\r\n  console.log(props);    \r\n  if (props.items) {\r\n    setPage(initialPage);\r\n  }\r\n}, [props.items, initialPage]);\r\n\r\nconst setPage = (page) => {\r\n    console.log(page);\r\n    let { items, pageSize } = props;\r\n    let newPager = pager;\r\n\r\n    newPager = getPager(items.length, page, pageSize);\r\n\r\n    let pageOfItems = items.slice(newPager.startIndex, newPager.endIndex + 1);\r\n    console.log(\"newPager\");\r\n    console.log(newPager);\r\n    console.log(newPager.startIndex);\r\n    console.log(newPager.endIndex);\r\n    console.log(pageOfItems);\r\n    setPager(newPager);\r\n    props.onChangePage(pageOfItems,newPager.startIndex + 1,newPager.endIndex + 1);\r\n};\r\n\r\n  const getPager = (totalItems, currentPage, pageSize) => {\r\n  currentPage = currentPage || 1;\r\n  pageSize = pageSize || 10;\r\n\r\n  let totalPages = Math.ceil(totalItems / pageSize);\r\n  let startPage, endPage;\r\n  if (totalPages <= 5) {\r\n    startPage = 1;\r\n    endPage = totalPages;\r\n  } else {\r\n    if (currentPage <= 3) {\r\n      startPage = 1;\r\n      endPage = 5;\r\n    } else if (currentPage + 2 >= totalPages) {\r\n      startPage = totalPages - 4;\r\n      endPage = totalPages;\r\n    } else {\r\n      startPage = currentPage - 2;\r\n      endPage = currentPage + 2;\r\n    }\r\n  }\r\n\r\n  let startIndex = (currentPage - 1) * pageSize;\r\n  let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n  let pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\r\n\r\n  return {\r\n    totalItems: totalItems,\r\n    currentPage: currentPage,\r\n    pageSize: pageSize,\r\n    totalPages: totalPages,\r\n    startPage: startPage,\r\n    endPage: endPage,\r\n    startIndex: startIndex,\r\n    endIndex: endIndex,\r\n    pages: pages\r\n  };\r\n  };\r\n\r\n  if (!pager.pages || pager.pages.length <= 1) {\r\n  return null;\r\n  }\r\n\r\nreturn (\r\n  <>\r\n    <CButtonToolbar role=\"group\" aria-label=\"Toolbar with button groups\">\r\n    <CButtonGroup className=\"me-2\" role=\"group\" aria-label=\"First group\">\r\n      <CButton className='pagination-color' disabled={pager.currentPage === 1} onClick={() => setPage(pager.currentPage - 1)}>Previous</CButton>\r\n    </CButtonGroup>    \r\n    <CButtonGroup className=\"me-2\" role=\"group\" aria-label=\"First group\">\r\n      {pager.pages.map((page, index) => (\r\n        <CButton color=\"primary\" key={index} className={pager.currentPage === page ? \"pagination-color actives\" : \"pagination-color\"} onClick={() => setPage(page)}>{page}</CButton>\r\n      ))}    \r\n    </CButtonGroup>\r\n    <CButtonGroup className=\"me-2\" role=\"group\" aria-label=\"First group\">\r\n      <CButton className='pagination-color' disabled={pager.currentPage === pager.totalPages} onClick={() => setPage(pager.currentPage + 1)}>Next</CButton>\r\n    </CButtonGroup>        \r\n    </CButtonToolbar>\r\n</>\r\n);\r\n};\r\n\r\nexport default PaginationTree;","import React,{useState,useEffect} from 'react'\r\nimport { CCard, CCardBody, CCol, CCardHeader, CRow,CSpinner } from '@coreui/react'\r\nimport Tree from 'react-d3-tree'\r\nimport { useCenteredTree } from \"./helpers/Helpers\"\r\nimport './style.css';\r\nimport treedata from './json/tree.json'\r\nimport Pagination from \"./Pagination/PaginationTree\";\r\n\r\nconst DashTree = () => {\r\n    const [data, setData] = useState({\"name\": treedata[0]['name'],\"id\": treedata[0]['gid'],\"type\": treedata[0]['itemtype'],\"children\": []});\r\n    const [treeData, setTreeData] = useState({\"name\": treedata[0]['name'],\"id\": treedata[0]['gid'],\"type\": treedata[0]['itemtype'],\"children\": []});\r\n    const [datas, setDatas] = useState(treedata);    \r\n    const [start, setStart] = useState(0); \r\n    const [end, setEnd] = useState(40);\r\n    const [tooltip, setTooltipVisible] = useState(false);\r\n    const [dimensions, translate, containerRef] = useCenteredTree();    \r\n    const [loadingSpinner, setLoadingSpinner] = useState(true);\r\n    let id = 0;\r\n    const onChangePage = (pageOfItems,startIndex,endIndex) => {\r\n      console.log(\"onchange\");\r\n      console.log(startIndex);\r\n      console.log(endIndex);\r\n      setStart(endIndex);\r\n      setEnd(startIndex + endIndex);\r\n      setLoadingSpinner(true);    \r\n      console.log(start);\r\n      console.log(end);\r\n      const convertedArr = pageOfItems.map(convertDownstreamToArray);\r\n      let orgChartString = JSON.stringify(convertedArr);\r\n      orgChartString = orgChartString.replace(/downstream/g, 'children');\r\n      pageOfItems = JSON.parse(orgChartString);\r\n      setTreeData(pageOfItems);\r\n      setData(pageOfItems)    \r\n      setTimeout(() => {\r\n        setLoadingSpinner(false);\r\n      }, 500);                \r\n    };    \r\n    const renderRectSvgNode = ({ nodeDatum, toggleNode }) => {\r\n      console.log(nodeDatum);\r\n        let shortText = nodeDatum['name'].substring(0, 110);\r\n        let firstLine = shortText.substring(0, 30);\r\n        let secondLine = shortText.substring(30, 60);\r\n        let thirdLine = shortText.substring(60, 90);        \r\n        let fourthLine = shortText.substring(90, 110);        \r\n        let secondData = '';\r\n        let backgroundColor = '';\r\n        if(nodeDatum.itemtype === 1){\r\n          backgroundColor = \"#00973d\";\r\n        }\r\n        else if(nodeDatum.itemtype === 2){\r\n          backgroundColor = \"#F56457\";\r\n        }\r\n        else if(nodeDatum.itemtype === 3){\r\n          backgroundColor = \"#7E1470\";\r\n        }\r\n        else if(nodeDatum.itemtype === 4){\r\n          backgroundColor = \"#3245BF\";\r\n        }\r\n        else if(nodeDatum.itemtype === 5){\r\n          backgroundColor = \"#5D6E1E\";\r\n        }\r\n        else if(nodeDatum.itemtype === 6){\r\n          backgroundColor = \"#BD3B1B\";\r\n        }\r\n        else if(nodeDatum.itemtype === 7){\r\n          backgroundColor = \"#E83845\";\r\n        }\r\n        else {\r\n          backgroundColor = \"#012F63\";\r\n        }                        \r\n        if(fourthLine === ''){\r\n          secondData = '';\r\n        }\r\n        else{\r\n          secondData = fourthLine + '...';\r\n        }\r\n        shortText = shortText + '...'\r\n        let type = nodeDatum.itemtype;\r\n        let svg_id = \"svg_id\"+id;\r\n        return (\r\n          <>\r\n          <g id={svg_id} transform=\"translate(-598 -770)\" stroke-width=\"0\">\r\n            <rect id=\"Rectangle_4292\" data-name=\"Rectangle 4292\" width=\"257\" height=\"135\" rx=\"13\" transform=\"translate(536 713)\" fill={backgroundColor}/>\r\n            <path id=\"Path_6071\" data-name=\"Path 6071\" d=\"M0,0H257\" transform=\"translate(536 747.5)\" fill=\"none\" stroke=\"#fff\" stroke-width=\"2\"/>\r\n            <text id=\"textid\" stroke-width=\"0\" data-name={nodeDatum.name} transform=\"translate(546 757)\" fill=\"#fff\" font-size=\"15\" font-family=\"Rubik-Regular, Rubik\"><tspan x=\"0\" y=\"14\">{firstLine}</tspan><tspan x=\"0\" y=\"36\">{secondLine} </tspan><tspan x=\"0\" y=\"58\">{thirdLine}</tspan><tspan x=\"0\" y=\"80\">{fourthLine}</tspan></text>\r\n            {\r\n              secondData === '' ? (\r\n                <></>\r\n              ) : (\r\n                <text id=\"Dasboard\" transform=\"translate(704 837)\" fill=\"#fff\" font-size=\"15\" font-family=\"Rubik-Regular, Rubik\" text-decoration=\"underline\" stroke-width=\"0\"><tspan x=\"0\" y=\"0\" onMouseOver={(e) => handleMouseOver(nodeDatum.name,svg_id,event)} onMouseOut={() => handleMouseOut(svg_id)} >Read more</tspan></text>\r\n              )\r\n            }            \r\n            <text id=\"Dasboard-2\" data-name=\"Dasboard\" transform=\"translate(546 738)\" fill=\"#fff\" font-size=\"21\" font-family=\"Rubik-Regular, Rubik\" stroke-width=\"0\"><tspan x=\"0\" y=\"0\"> {nodeDatum['gid']}</tspan></text>\r\n            {\r\n              nodeDatum.children ? (\r\n                nodeDatum.__rd3t.collapsed ?(\r\n                  <>\r\n                    <text id=\"Dasboard-3\" data-name=\"Dasboard\" transform=\"translate(707 736)\" fill=\"#fff\" font-size=\"15\" font-family=\"Rubik-Regular, Rubik\" stroke-width=\"0\" onClick={toggleNode}><tspan x=\"0\" y=\"0\">{nodeDatum.__rd3t.collapsed ? 'Expand' : 'Collapse'}</tspan></text>\r\n                    <g id=\"Navigation\" transform=\"translate(765.154 722.395)\" onClick={toggleNode}>\r\n                      <g id=\"_-Round-_-Navigation-_-arrow_back_ios\" data-name=\"-Round-/-Navigation-/-arrow_back_ios\" transform=\"translate(0 0)\">\r\n                        <g id=\"Group_277\" data-name=\"Group 277\">\r\n                          <path id=\"_-Icon-Color\" stroke-width=\"0\" data-name=\"🔹-Icon-Color\" d=\"M.338,16.864a1.145,1.145,0,0,0,1.622,0L9.578,9.247a.913.913,0,0,0,0-1.292L1.96.337A1.147,1.147,0,0,0,.338,1.959L6.974,8.605.329,15.251A1.143,1.143,0,0,0,.338,16.864Z\" transform=\"translate(0 0)\" fill=\"#fff\" fill-rule=\"evenodd\"/>\r\n                        </g>\r\n                      </g>\r\n                    </g>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <text id=\"Dasboard-3\" data-name=\"Dasboard\" transform=\"translate(717 736)\" fill=\"#fff\" font-size=\"15\" font-family=\"Rubik-Regular, Rubik\" stroke-width=\"0\" onClick={toggleNode}><tspan x=\"0\" y=\"0\">{nodeDatum.__rd3t.collapsed ? 'Expand' : 'Collapse'}</tspan></text>\r\n                    <g id=\"Navigation\" transform=\"translate(695.001 720)\" onClick={toggleNode}>\r\n                      <g id=\"_-Round-_-Navigation-_-arrow_back_ios\" data-name=\"-Round-/-Navigation-/-arrow_back_ios\">\r\n                        <g id=\"Group_277\" data-name=\"Group 277\">\r\n                          <path id=\"_-Icon-Color\" stroke-width=\"0\" data-name=\"🔹-Icon-Color\" d=\"M9.508,16.864a1.145,1.145,0,0,1-1.622,0L.268,9.247a.913.913,0,0,1,0-1.292L7.885.337A1.147,1.147,0,0,1,9.508,1.959L2.871,8.605l6.646,6.646A1.143,1.143,0,0,1,9.508,16.864Z\" transform=\"translate(5.727 2.395)\" fill=\"#fff\" fill-rule=\"evenodd\"/>\r\n                        </g>\r\n                      </g>\r\n                    </g>            \r\n                  </>\r\n                )\r\n              ) : (\r\n                <></>\r\n              )\r\n            }\r\n          </g>\r\n          {id++}\r\n          </>       \r\n        );\r\n      }\r\n      const styles = {\r\n        nodes: {\r\n          node: {\r\n            shape: 'rect',\r\n            shapeProps: {\r\n              width: 200,\r\n              height: 50,\r\n              x: -100,\r\n              y: -25\r\n            },\r\n            textBlock: {\r\n              dy: -20\r\n            }\r\n          }\r\n        }\r\n      }  \r\n      const handleMouseOver = (input,id,event) => {\r\n        console.log(input);\r\n        console.log(id);\r\n        setTooltipVisible(true);\r\n        var myicon = document.getElementById(id);\r\n        var mypopup = document.getElementById(\"mypopup\");    \r\n        var iconPos = myicon.getBoundingClientRect();\r\n        mypopup.style.left = event.clientX + 20 + \"px\";\r\n        mypopup.style.top = event.clientY + 20 + \"px\";\r\n        mypopup.style.display = \"block\";    \r\n        document.getElementById(\"svg_content\").innerText = input;\r\n      };\r\n      \r\n      const handleMouseOut = (id) => {\r\n        var myicon = document.getElementById(id);\r\n        var mypopup = document.getElementById(\"mypopup\");    \r\n        mypopup.style.display = \"none\";    \r\n        setTooltipVisible(false);\r\n      };\r\n      const svgSquare = {\r\n        shape: 'rect',\r\n        shapeProps: {\r\n          width: 0,\r\n          height: 0,\r\n        }\r\n      }\r\n      function convertDownstreamToArray(obj) {\r\n        const { downstream, ...rest } = obj;\r\n        if (downstream && typeof downstream === \"object\") {\r\n          return {\r\n            ...rest,\r\n            downstream: [convertDownstreamToArray(downstream)],\r\n          };\r\n        }\r\n        return obj;\r\n      }\r\n      function handleLoadMore() {   \r\n        let children = datas.slice(0,1);\r\n        const convertedArr = children.map(convertDownstreamToArray);\r\n        let orgChartString = JSON.stringify(convertedArr);\r\n        orgChartString = orgChartString.replace(/downstream/g, 'children');\r\n        children = JSON.parse(orgChartString);\r\n        \r\n        console.log(children);\r\n        const child = children[start];\r\n        setStart(end);\r\n        setEnd(end + 40);\r\n      \r\n        console.log(start);\r\n        console.log(end);\r\n        setTreeData(children);\r\n        setData(children)        \r\n        setLoadingSpinner(false);\r\n      }\r\n\r\n      useEffect(() => {\r\n        handleLoadMore();\r\n      }, []);    \r\n              \r\n    return (\r\n      <>\r\n        <CRow>\r\n        <CCol xs={12} className=\"d-flex justify-content-end mb-4 pt-4\">\r\n          <Pagination\r\n            pageSize={1}\r\n            items={treedata}\r\n            onChangePage={onChangePage}\r\n          />            \r\n        </CCol>\r\n          <CCol xs={12} style={{\"height\":\"2800px\"}}>\r\n          {\r\n            loadingSpinner ? (\r\n              <div className=\"d-flex align-items-center justify-content-center\" style={{ position: \"fixed\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\" }}>\r\n                <CSpinner component=\"span\" size=\"lg\" aria-hidden=\"false\"/>\r\n              </div>\r\n            ) : (\r\n            <Tree \r\n              data={data} \r\n              dimensions={dimensions}\r\n              renderCustomNodeElement={renderRectSvgNode}\r\n              orientation=\"horizontal\"        \r\n              styles={styles}       \r\n              childrenKey=\"children\"  \r\n              nodeSvgShape={svgSquare}\r\n              pathFunc=\"step\"\r\n              zoom={1}       \r\n              translate={translate}\r\n              nodeSize={{\r\n                x: 540,\r\n                y: 100\r\n              }}\r\n              separation={{\r\n                siblings: 2,\r\n                nonSiblings: 4\r\n              }}                          \r\n            />              \r\n            )\r\n          }\r\n            <div id=\"mypopup\">\r\n              <p id=\"svg_content\"></p>\r\n            </div>        \r\n          </CCol>\r\n        </CRow>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default DashTree\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport const useCenteredTree = (defaultTranslate = { x: 0, y: 0 }) => {\r\n  const [translate, setTranslate] = useState(defaultTranslate);\r\n  const [dimensions, setDimensions] = useState();\r\n  const containerRef = useCallback((containerElem) => {\r\n    if (containerElem !== null) {\r\n      const { width, height } = containerElem.getBoundingClientRect();\r\n      setDimensions({ width, height });\r\n      setTranslate({ x: width / 2, y: height / 2 });\r\n    }\r\n  }, []);\r\n  return [dimensions, translate, containerRef];\r\n};\r\n"],"names":["props","useState","pager","setPager","initialPage","setPageSize","useEffect","items","length","setPage","pageSize","console","log","page","newPager","getPager","pageOfItems","slice","startIndex","endIndex","onChangePage","totalItems","currentPage","startPage","endPage","totalPages","Math","ceil","min","pages","Array","keys","map","i","role","className","disabled","onClick","index","color","treedata","data","setData","setTreeData","datas","start","setStart","end","setEnd","setTooltipVisible","useCenteredTree","dimensions","translate","loadingSpinner","setLoadingSpinner","id","handleMouseOver","input","event","myicon","document","getElementById","mypopup","getBoundingClientRect","style","left","clientX","top","clientY","display","innerText","handleMouseOut","convertDownstreamToArray","obj","downstream","rest","children","convertedArr","orgChartString","JSON","stringify","replace","parse","handleLoadMore","xs","setTimeout","position","transform","component","size","renderCustomNodeElement","nodeDatum","toggleNode","shortText","substring","firstLine","secondLine","thirdLine","fourthLine","secondData","backgroundColor","itemtype","svg_id","width","height","rx","fill","d","stroke","name","x","y","onMouseOver","e","onMouseOut","__rd3t","collapsed","orientation","styles","nodes","node","shape","shapeProps","textBlock","dy","childrenKey","nodeSvgShape","pathFunc","zoom","nodeSize","separation","siblings","nonSiblings","defaultTranslate","setTranslate","setDimensions","containerRef","useCallback","containerElem"],"sourceRoot":""}